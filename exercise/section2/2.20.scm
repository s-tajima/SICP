;= Question =============================================================================
; 問題 2.20
;
; 手続き+, *およびlistは任意個の引数をとる. 
; そういう手続きを定義する一つの方法は, 
; defineをドット末尾記法 (dotted-tail notation)で使うことだ. 
; 手続き定義で, 最後のパラメタの名前の前にドットがあるパラメタ並びは, 
; 手続きが呼び出される時, 前の方のパラメタはいつものように前の方の引数の値になるが, 
; 最後のパラメタの値は残りの引数のリストになることを意味する. 
; 
; 例えば,
;   (define (f x y . z) ⟨body⟩)
; の定義なら, 手続きfは二つかそれを超える個数の引数で呼び出すことが出来る.
; 
;   (f 1 2 3 4 5 6)
; 
; を評価すると, fの本体でxは1, yは2, zはリスト(3 4 5 6)になる.
; 
;   (define (g . w) ⟨body⟩)
; 
; の定義なら, 手続きgは零個かそれを超える個数の引数で呼び出すことが出来る.
; 
;   (g 1 2 3 4 5 6)
; 
; を評価すると, gの本体でwはリスト(1 2 3 4 5 6)になる.11
; 
; この記法を使って, 一つかそれを超える個数の整数をとり, 
; 先頭と同じ偶奇性を持つ引数のリストを返す手続きsame-parityを書け. 
;
; 例えば
;    (same-parity 1 2 3 4 5 6 7)
;    (1 3 5 7)
; 
;    (same-parity 2 3 4 5 6 7)
;    (2 4 6)
;
;= Prepared =============================================================================


;= Answer ===============================================================================
(define (same-parity a . z)
  (define (iter items answer)
    (if (null? items)
        answer
        (iter (cdr items)
              (if (= (remainder (car items) 2)
                     (remainder a 2))
                  (append answer (list (car items)))
                  answer))))
  (iter z (list a)))

(print (same-parity 1 3 2 4 5 6 7))
