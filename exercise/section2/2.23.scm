;= Question =============================================================================
;
; 問題 2.23
; 
; 手続きfor-eachはmapに似ている. 引数として手続きと要素のリストをとる. 
; しかし, 結果のリストを作るのではなく, 
; for-eachは要素のそれぞれに左から右へ順に手続きを作用させる. 
; 手続きを要素に作用させて返される値は使わない. 
; for-eachは, 印字のような行動を起す手続きと一緒に使う. 
; 例えば
; 
; (for-each (lambda (x) (newline) (display x))
;           (list 57 321 88))
; 57
; 321
; 88
; 
; for-eachの呼出しが返す値(上には示さない)は真のような任意のものであってよい. 
; for-eachを実装せよ. 
;
;= Prepared =============================================================================
;= Answer ===============================================================================
(define (my-for-each factor items)
  (factor (car items))
  (if (null? (cdr items))
    ()
    (my-for-each factor (cdr items))))

(print (my-for-each (lambda (x) (newline) (display x))
             (list 57 321 88)))


